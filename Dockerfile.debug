# Debug Dockerfile with verbose output
FROM node:20-alpine AS deps

WORKDIR /app
COPY package.json ./
COPY package-lock.json* ./

# Show package.json contents
RUN echo "=== Package.json contents ===" && cat package.json

RUN npm ci --only=production && npm cache clean --force

# Build stage with debugging
FROM node:20-alpine AS build

WORKDIR /app
COPY package.json ./
COPY package-lock.json* ./

# Install all dependencies including dev deps
RUN npm ci

# Copy source code
COPY . .
COPY --from=deps /app/node_modules ./node_modules

# Debug: Show what files we have
RUN echo "=== Files in /app ===" && ls -la
RUN echo "=== Files in /app/src ===" && ls -la src/

# Generate Prisma client with debugging
RUN echo "=== Generating Prisma client ===" && npx prisma generate

# Debug: Check TypeScript and dependencies
RUN echo "=== TypeScript version ===" && npx tsc --version
RUN echo "=== Node version ===" && node --version
RUN echo "=== NPM version ===" && npm --version

# Debug: Show tsconfig.json
RUN echo "=== tsconfig.json ===" && cat tsconfig.json

# Debug: Try type checking first
RUN echo "=== Running type check ===" && npx tsc --noEmit --listFiles || echo "Type check failed"

# Debug: List what's in node_modules
RUN echo "=== Checking critical dependencies ===" && \
    ls node_modules/@types/ | head -10 && \
    ls node_modules/typescript/ | head -5

# Build with verbose output
RUN echo "=== Starting build ===" && npm run build

# Production stage
FROM node:20-alpine AS production

RUN apk add --no-cache dumb-init

WORKDIR /app
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodeuser -u 1001

COPY --from=build --chown=nodeuser:nodejs /app/dist ./dist
COPY --from=build --chown=nodeuser:nodejs /app/node_modules ./node_modules
COPY --from=build --chown=nodeuser:nodejs /app/prisma ./prisma
COPY --from=build --chown=nodeuser:nodejs /app/package.json ./

ENV NODE_ENV=production
ENV PORT=8080

EXPOSE 8080
USER nodeuser

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/healthz', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]