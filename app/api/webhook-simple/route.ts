import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '../../../src/db'

export async function POST(request: NextRequest) {
  try {
    console.log('=== SIMPLE WEBHOOK ===', new Date().toISOString())
    
    const telegramToken = process.env.TELEGRAM_TOKEN
    if (!telegramToken) {
      console.log('=== NO TELEGRAM_TOKEN ===')
      return NextResponse.json({ ok: true, message: 'No token configured' })
    }

    const body = await request.json() as any
    console.log('=== REQUEST BODY ===', JSON.stringify(body, null, 2))
    
    const message = body.message
    if (!message || !message.text) {
      return NextResponse.json({ ok: true })
    }
    
    const chatId = message.chat.id
    const text = message.text
    
    console.log(`=== MESSAGE: ${text} FROM CHAT: ${chatId} ===`)
    
    if (text.startsWith('/link_sleeper')) {
      const args = text.split(' ').slice(1)
      
      if (args.length === 0 || !args[0]) {
        await sendMessage(telegramToken, chatId, '‚ùå **–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:** `/link_sleeper <–Ω—ñ–∫–Ω–µ–π–º>`\\n\\nüìù **–ü—Ä–∏–∫–ª–∞–¥:** `/link_sleeper Disgusting23`')
        return NextResponse.json({ ok: true })
      }
      
      const username = args[0].trim()
      
      if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        await sendMessage(telegramToken, chatId, '‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É**\\n\\n–ù—ñ–∫–Ω–µ–π–º –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ:\\n‚Ä¢ –õ–∞—Ç–∏–Ω—Å—å–∫—ñ –±—É–∫–≤–∏ (a-z, A-Z)\\n‚Ä¢ –¶–∏—Ñ—Ä–∏ (0-9)\\n‚Ä¢ –ó–Ω–∞–∫ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (_)')
        return NextResponse.json({ ok: true })
      }
      
      await sendMessage(telegramToken, chatId, `üîç –®—É–∫–∞—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ **${username}** –≤ Sleeper...`)
      try {
        console.log(`=== CALLING SLEEPER API FOR USER: ${username} ===`)
        
        // Direct Sleeper API call using the provided username with timeout
        const controller = new AbortController()
        const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 second timeout
        
        const userResponse = await fetch(`https://api.sleeper.app/v1/user/${username}`, {
          signal: controller.signal
        })
        clearTimeout(timeoutId)
        
        console.log(`=== USER API RESPONSE STATUS: ${userResponse.status} ===`)
        
        if (!userResponse.ok) {
          if (userResponse.status === 404) {
            console.log(`=== USER NOT FOUND: ${username} ===`)
            await sendMessage(telegramToken, chatId, `‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\\n\\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}" –Ω–µ —ñ—Å–Ω—É—î –≤ Sleeper.\\n\\n‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:**\\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É\\n‚Ä¢ –ß–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤ Sleeper\\n\\nüí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ù—ñ–∫–Ω–µ–π–º —á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É`)
            return NextResponse.json({ ok: true })
          }
          throw new Error(`HTTP ${userResponse.status}`)
        }
        
        const userData = await userResponse.json() as any
        console.log(`=== USER DATA RECEIVED: ${userData?.user_id} ===`)
        
        if (!userData || !userData.user_id) {
          console.log(`=== INVALID USER DATA ===`)
          await sendMessage(telegramToken, chatId, `‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö**\\n\\n–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}".\\n\\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`)
          return NextResponse.json({ ok: true })
        }
        
        // Get user's leagues for current season (2024) with timeout
        console.log(`=== CALLING LEAGUES API FOR USER ID: ${userData.user_id} ===`)
        const leaguesController = new AbortController()
        const leaguesTimeoutId = setTimeout(() => leaguesController.abort(), 10000)
        
        const leaguesResponse = await fetch(`https://api.sleeper.app/v1/user/${userData.user_id}/leagues/nfl/2024`, {
          signal: leaguesController.signal
        })
        clearTimeout(leaguesTimeoutId)
        
        console.log(`=== LEAGUES API RESPONSE STATUS: ${leaguesResponse.status} ===`)
        const leagues = leaguesResponse.ok ? await leaguesResponse.json() as any[] : []
        console.log(`=== LEAGUES COUNT: ${leagues.length} ===`)
        
        const displayName = userData.display_name || userData.username || username
        const avatar = userData.avatar ? `https://sleepercdn.com/avatars/thumbs/${userData.avatar}` : null
        
        let responseMessage = `‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ!**\\n\\nüë§ **–ü—Ä–æ—Ñ—ñ–ª—å:**\\n‚Ä¢ –Ü–º'—è: ${displayName}\\n‚Ä¢ ID: ${userData.user_id}`
        
        if (avatar) {
          responseMessage += `\\n‚Ä¢ –ê–≤–∞—Ç–∞—Ä: [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](${avatar})`
        }
        
        if (leagues && leagues.length > 0) {
          responseMessage += `\\n\\nüèà **–õ—ñ–≥–∏ NFL 2024 (${leagues.length}):**`
          leagues.slice(0, 5).forEach((league: any, index: number) => {
            responseMessage += `\\n${index + 1}. ${league.name}`
          })
          
          if (leagues.length > 5) {
            responseMessage += `\\n... —ñ —â–µ ${leagues.length - 5} –ª—ñ–≥`
          }
        } else {
          responseMessage += `\\n\\nüèà **–õ—ñ–≥–∏ NFL 2024:** –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ`
        }
        
        responseMessage += `\\n\\nüîÑ **–°—Ç–∞—Ç—É—Å –ë–î:** –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\\nüíæ –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –ø—Ä–∞—Ü—é—î!\\n\\nüí¨ **–ü–∏—Ç–∞–Ω–Ω—è?** @anton_kravchuk23`
        
        // Try to save to database with timeout (non-blocking)
        const saveToDatabase = async () => {
          try {
            console.log(`=== SAVING TO DATABASE ===`)
            
            // Test database connection first with short timeout
            const dbTimeout = new Promise((_, reject) => 
              setTimeout(() => reject(new Error('Database timeout')), 5000)
            )
            
            const dbTest = prisma.$queryRaw`SELECT 1`
            await Promise.race([dbTest, dbTimeout])
            
            // Create or update user
            const user = await prisma.user.upsert({
              where: { tgUserId: BigInt(chatId) },
              update: {
                updatedAt: new Date()
              },
              create: {
                tgUserId: BigInt(chatId),
                platform: 'telegram'
              }
            })
            
            // Create or update provider
            await prisma.provider.upsert({
              where: { 
                userId_provider: {
                  userId: user.id,
                  provider: 'sleeper'
                }
              },
              update: {
                providerUsername: userData.username,
                providerUserId: userData.user_id,
                updatedAt: new Date()
              },
              create: {
                userId: user.id,
                provider: 'sleeper',
                providerUsername: userData.username,
                providerUserId: userData.user_id
              }
            })
            
            // Save leagues (limited to prevent timeout)
            for (const league of leagues.slice(0, 3)) { // Limit to first 3 leagues
              const savedLeague = await prisma.league.upsert({
                where: { providerLeagueId: league.league_id },
                update: {
                  name: league.name,
                  season: 2024,
                  updatedAt: new Date()
                },
                create: {
                  provider: 'sleeper',
                  providerLeagueId: league.league_id,
                  name: league.name,
                  season: 2024,
                  sport: 'nfl'
                }
              })
              
              // Link user to league
              await prisma.userLeague.upsert({
                where: {
                  userId_leagueId: {
                    userId: user.id,
                    leagueId: savedLeague.id
                  }
                },
                update: {},
                create: {
                  userId: user.id,
                  leagueId: savedLeague.id,
                  teamId: '1' // Default team ID, should be updated with actual roster info
                }
              })
            }
            
            return true
          } catch (dbError) {
            console.error('=== DATABASE ERROR ===', dbError)
            return false
          }
        }
        
        // Try to save to database but don't wait for it
        const dbPromise = saveToDatabase()
        let dbSaveResult = false
        
        try {
          dbSaveResult = await Promise.race([
            dbPromise,
            new Promise<boolean>((resolve) => setTimeout(() => resolve(false), 3000))
          ])
        } catch (error) {
          console.error('Database save timeout or error:', error)
        }
        
        if (dbSaveResult) {
          responseMessage = responseMessage.replace(
            'üîÑ **–°—Ç–∞—Ç—É—Å –ë–î:** –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\\nüíæ –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –ø—Ä–∞—Ü—é—î!',
            '‚úÖ **–°—Ç–∞—Ç—É—Å –ë–î:** –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ\\nüíæ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö!'
          )
          console.log(`=== DATABASE SAVE SUCCESSFUL ===`)
        } else {
          console.log(`=== DATABASE SAVE FAILED OR TIMEOUT ===`)
        }
        
        console.log(`=== SENDING FINAL MESSAGE ===`)
        await sendMessage(telegramToken, chatId, responseMessage)
        console.log(`=== MESSAGE SENT SUCCESSFULLY ===`)
        
      } catch (error) {
        console.error('=== SLEEPER API ERROR ===', error)
        
        let errorMessage = `‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è**\\n\\n–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Sleeper API.`
        
        if (error instanceof Error) {
          if (error.name === 'AbortError') {
            errorMessage = `‚ùå **–¢–∞–π–º-–∞—É—Ç –∑–∞–ø–∏—Ç—É**\\n\\n–ó–∞–ø–∏—Ç –¥–æ Sleeper API –ø–µ—Ä–µ–≤–∏—â–∏–≤ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.`
          }
          console.error('Error details:', error.message)
        }
        
        errorMessage += `\\n\\nüîÑ **–°–ø—Ä–æ–±—É–π—Ç–µ:**\\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω\\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω—ñ–∫–Ω–µ–π–º—É\\n\\nüí¨ **–ü—Ä–æ–±–ª–µ–º–∏?** @anton_kravchuk23`
        
        await sendMessage(telegramToken, chatId, errorMessage)
      }
    } else if (text === '/help') {
      const helpMessage = `üîß **Fantasy Check - –î–æ–≤—ñ–¥–∫–∞**

üèà **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
‚Ä¢ /link_sleeper <–Ω—ñ–∫> - –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Sleeper –ø—Ä–æ—Ñ—ñ–ª—å

üèÜ **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ª—ñ–≥–∞–º–∏:**
‚Ä¢ /leagues - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –ª—ñ–≥–∏
‚Ä¢ /today - –î–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ

‚öôÔ∏è **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**
‚Ä¢ /timezone - –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
‚Ä¢ /lang - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É
‚Ä¢ /feedback - –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—ñ–¥–≥—É–∫

üì± **–ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞:** https://fantasy-check.vercel.app/

üí¨ **–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:** @anton_kravchuk23`
      
      await sendMessage(telegramToken, chatId, helpMessage)
    } else if (text === '/start') {
      await sendMessage(telegramToken, chatId, 'üöÄ Fantasy Check Bot –ø—Ä–∞—Ü—é—î! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!')
    }
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('=== SIMPLE WEBHOOK ERROR ===', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

async function sendMessage(token: string, chatId: number, text: string) {
  try {
    // Replace escaped newlines with actual newlines
    const cleanText = text.replace(/\\n/g, '\n')
    
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: cleanText,
        parse_mode: 'Markdown',
        disable_web_page_preview: true
      }),
    })
    
    if (!response.ok) {
      console.error('Failed to send message:', await response.text())
    } else {
      console.log('Message sent successfully')
    }
  } catch (error) {
    console.error('Error sending message:', error)
  }
}