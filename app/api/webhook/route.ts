import { NextRequest, NextResponse } from 'next/server'
import { Telegraf } from 'telegraf'

export async function POST(request: NextRequest) {
  try {
    console.log('=== WEBHOOK RECEIVED ===', new Date().toISOString())
    
    const telegramToken = process.env.TELEGRAM_TOKEN
    if (!telegramToken) {
      console.log('=== NO TELEGRAM_TOKEN ===')
      return NextResponse.json({ ok: true, message: 'No token configured' })
    }

    // Initialize Telegraf bot
    const bot = new Telegraf(telegramToken)
    
    // Import handlers - with fallbacks for database connection issues
    const { handleStart } = await import('../../../src/bot/handlers/start').catch(() => ({ handleStart: async (ctx: any) => ctx.reply('üöÄ Fantasy Check Bot –ø—Ä–∞—Ü—é—î! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!') }))
    const { handleHelp } = await import('../../../src/bot/handlers/help').catch(() => ({ handleHelp: async (ctx: any) => ctx.reply('üîß **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n‚Ä¢ /help - –î–æ–≤—ñ–¥–∫–∞\n‚Ä¢ /link_sleeper <–Ω—ñ–∫> - –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Sleeper') }))
    
    // Simplified link_sleeper handler without database
    const handleLinkSleeper = async (ctx: any) => {
      const message = ctx.message && 'text' in ctx.message ? ctx.message.text : ''
      const args = message.split(' ').slice(1)
      
      if (args.length === 0 || !args[0]) {
        await ctx.reply('‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏: /link_sleeper <–Ω—ñ–∫–Ω–µ–π–º>\n\n–ü—Ä–∏–∫–ª–∞–¥: /link_sleeper Disgusting23')
        return
      }
      
      const username = args[0].trim()
      
      if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        await ctx.reply('‚ùå –ù—ñ–∫–Ω–µ–π–º –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑–Ω–∞–∫ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è')
        return
      }
      
      await ctx.reply(`‚úÖ –°–ø—Ä–æ–±—É—é –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}"...\n\nüîÑ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –†–æ–∑—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ.\n\n–ü–æ–∫–∏ —â–æ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:\n‚Ä¢ /help - –î–æ–≤—ñ–¥–∫–∞\n‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞`)
    }
    
    // Import other handlers with fallbacks
    const { handleLeagues, handleLeagueCallback } = await import('../../../src/bot/handlers/leagues').catch(() => ({ 
      handleLeagues: async (ctx: any) => ctx.reply('üèà –§—É–Ω–∫—Ü—ñ—è –ª—ñ–≥ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'),
      handleLeagueCallback: async (ctx: any) => ctx.reply('–§—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }))
    const { handleToday } = await import('../../../src/bot/handlers/today').catch(() => ({ handleToday: async (ctx: any) => ctx.reply('üìä –î–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π') }))
    const { handleTimezone, handleTimezoneInput } = await import('../../../src/bot/handlers/timezone').catch(() => ({ 
      handleTimezone: async (ctx: any) => ctx.reply('üïê –§—É–Ω–∫—Ü—ñ—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'),
      handleTimezoneInput: async (ctx: any) => {}
    }))
    const { handleFeedback, handleFeedbackMessage, isUserInFeedbackMode } = await import('../../../src/bot/handlers/feedback').catch(() => ({ 
      handleFeedback: async (ctx: any) => ctx.reply('üí¨ –î–ª—è –∑–≤\'—è–∑–∫—É –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏ –Ω–∞–ø–∏—à—ñ—Ç—å: @ak_papasoft'),
      handleFeedbackMessage: async (ctx: any) => {},
      isUserInFeedbackMode: () => false
    }))
    const { handleLanguage } = await import('../../../src/bot/handlers/language').catch(() => ({ handleLanguage: async (ctx: any) => ctx.reply('üåê –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞') }))
    
    // Setup command handlers
    bot.command('start', handleStart)
    bot.command('help', handleHelp)
    bot.command('link_sleeper', handleLinkSleeper)
    bot.command('leagues', handleLeagues)
    bot.command('today', handleToday)
    bot.command('timezone', handleTimezone)
    bot.command('feedback', handleFeedback)
    bot.command('lang', handleLanguage)

    // Setup callback query handler for inline buttons
    bot.on('callback_query', handleLeagueCallback)

    // Setup text message handler
    bot.on('text', async (ctx) => {
      const userId = ctx.from?.id
      
      if (userId && isUserInFeedbackMode(userId)) {
        await handleFeedbackMessage(ctx)
        return
      }
      
      await handleTimezoneInput(ctx)
    })

    // Handle unknown commands
    bot.on('message', async (ctx) => {
      if (ctx.message && 'text' in ctx.message && ctx.message.text.startsWith('/')) {
        await ctx.reply('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.')
      }
    })

    // Error handling
    bot.catch(async (err, ctx) => {
      console.error('=== BOT ERROR ===', err)
      try {
        await ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
      } catch (replyError) {
        console.error('Failed to send error message:', replyError)
      }
    })
    
    // Get request body
    const body = await request.json() as any
    console.log('=== PROCESSING UPDATE ===', JSON.stringify(body, null, 2))
    
    // Process the update
    await bot.handleUpdate(body)
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('=== WEBHOOK ERROR ===', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}