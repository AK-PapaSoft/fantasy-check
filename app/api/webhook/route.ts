import { NextRequest, NextResponse } from 'next/server'
import { Telegraf } from 'telegraf'

export async function POST(request: NextRequest) {
  try {
    console.log('=== WEBHOOK RECEIVED ===', new Date().toISOString())
    
    const telegramToken = process.env.TELEGRAM_TOKEN
    if (!telegramToken) {
      console.log('=== NO TELEGRAM_TOKEN ===')
      return NextResponse.json({ ok: true, message: 'No token configured' })
    }

    // Initialize Telegraf bot
    const bot = new Telegraf(telegramToken)
    
    // Import handlers - with fallbacks for database connection issues
    const { handleStart } = await import('../../../src/bot/handlers/start').catch(() => ({ handleStart: async (ctx: any) => ctx.reply('üöÄ Fantasy Check Bot –ø—Ä–∞—Ü—é—î! –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!') }))
    const { handleHelp } = await import('../../../src/bot/handlers/help')
    
    // Working link_sleeper handler with direct Sleeper API integration
    const handleLinkSleeper = async (ctx: any) => {
      const message = ctx.message && 'text' in ctx.message ? ctx.message.text : ''
      const args = message.split(' ').slice(1)
      
      if (args.length === 0 || !args[0]) {
        await ctx.reply('‚ùå **–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:** `/link_sleeper <–Ω—ñ–∫–Ω–µ–π–º>`\n\nüìù **–ü—Ä–∏–∫–ª–∞–¥:** `/link_sleeper Disgusting23`', { parse_mode: 'Markdown' })
        return
      }
      
      const username = args[0].trim()
      
      if (!/^[a-zA-Z0-9_]+$/.test(username)) {
        await ctx.reply('‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É**\n\n–ù—ñ–∫–Ω–µ–π–º –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ:\n‚Ä¢ –õ–∞—Ç–∏–Ω—Å—å–∫—ñ –±—É–∫–≤–∏ (a-z, A-Z)\n‚Ä¢ –¶–∏—Ñ—Ä–∏ (0-9)\n‚Ä¢ –ó–Ω–∞–∫ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (_)', { parse_mode: 'Markdown' })
        return
      }
      
      await ctx.reply(`üîç –®—É–∫–∞—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ **${username}** –≤ Sleeper...`, { parse_mode: 'Markdown' })
      
      try {
        // Direct Sleeper API call
        const userResponse = await fetch(`https://api.sleeper.app/v1/user/${username}`)
        
        if (!userResponse.ok) {
          if (userResponse.status === 404) {
            await ctx.reply(`‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**\n\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}" –Ω–µ —ñ—Å–Ω—É—î –≤ Sleeper.\n\n‚úÖ **–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:**\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω—ñ–∫–Ω–µ–π–º—É\n‚Ä¢ –ß–∏ —ñ—Å–Ω—É—î —Ç–∞–∫–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≤ Sleeper\n\nüí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –ù—ñ–∫–Ω–µ–π–º —á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É`, { parse_mode: 'Markdown' })
            return
          }
          throw new Error(`HTTP ${userResponse.status}`)
        }
        
        const userData = await userResponse.json()
        
        if (!userData || !userData.user_id) {
          await ctx.reply(`‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö**\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}".\n\n–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.`, { parse_mode: 'Markdown' })
          return
        }
        
        // Get user's leagues for current season (2024)
        const leaguesResponse = await fetch(`https://api.sleeper.app/v1/user/${userData.user_id}/leagues/nfl/2024`)
        const leagues = leaguesResponse.ok ? await leaguesResponse.json() : []
        
        const displayName = userData.display_name || userData.username || username
        const avatar = userData.avatar ? `https://sleepercdn.com/avatars/thumbs/${userData.avatar}` : null
        
        let responseMessage = `‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–Ω–∞–π–¥–µ–Ω–æ!**\n\nüë§ **–ü—Ä–æ—Ñ—ñ–ª—å:**\n‚Ä¢ –Ü–º'—è: ${displayName}\n‚Ä¢ ID: ${userData.user_id}`
        
        if (avatar) {
          responseMessage += `\n‚Ä¢ –ê–≤–∞—Ç–∞—Ä: [–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏](${avatar})`
        }
        
        if (leagues && leagues.length > 0) {
          responseMessage += `\n\nüèà **–õ—ñ–≥–∏ NFL 2024 (${leagues.length}):**`
          leagues.slice(0, 5).forEach((league: any, index: number) => {
            responseMessage += `\n${index + 1}. ${league.name}`
          })
          
          if (leagues.length > 5) {
            responseMessage += `\n... —ñ —â–µ ${leagues.length - 5} –ª—ñ–≥`
          }
        } else {
          responseMessage += `\n\nüèà **–õ—ñ–≥–∏ NFL 2024:** –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ`
        }
        
        responseMessage += `\n\nüîÑ **–°—Ç–∞—Ç—É—Å –ë–î:** –¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\nüíæ –î–∞–Ω—ñ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é –ø—Ä–∞—Ü—é—î!\n\nüí¨ **–ü–∏—Ç–∞–Ω–Ω—è?** @ak_papasoft`
        
        await ctx.reply(responseMessage, { 
          parse_mode: 'Markdown',
          disable_web_page_preview: true 
        })
        
      } catch (error) {
        console.error('Sleeper API error:', error)
        await ctx.reply(`‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è**\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Sleeper API.\n\nüîÑ **–°–ø—Ä–æ–±—É–π—Ç–µ:**\n‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω\n‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω—ñ–∫–Ω–µ–π–º—É\n\nüí¨ **–ü—Ä–æ–±–ª–µ–º–∏?** @ak_papasoft`, { parse_mode: 'Markdown' })
      }
    }
    
    // Improved fallback handlers
    const handleLeagues = async (ctx: any) => {
      await ctx.reply('üèà **–ú–æ—ó –ª—ñ–≥–∏**\n\nüîÑ –§—É–Ω–∫—Ü—ñ—è –ª—ñ–≥ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.\n\nüìù **–©–æ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:**\n‚Ä¢ –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /link_sleeper <–Ω—ñ–∫> –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é\n‚Ä¢ –ü—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î –≤–∞—à—ñ –ª—ñ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—è—Ç—å—Å—è\n\nüí¨ **–ü–∏—Ç–∞–Ω–Ω—è?** –ü–∏—à—ñ—Ç—å @ak_papasoft', { parse_mode: 'Markdown' })
    }
    
    const handleLeagueCallback = async (ctx: any) => {
      await ctx.reply('üîÑ –§—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
    const handleToday = async (ctx: any) => {
      const todayMessage = `üìä **–î–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ**

üóìÔ∏è **${new Date().toLocaleDateString('uk-UA', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}**

üîÑ –§—É–Ω–∫—Ü—ñ—è –¥–∞–π–¥–∂–µ—Å—Ç—É —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö.

üèà **–©–æ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:**
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–∫–ª–∞–¥—É
‚Ä¢ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–∞–≤–º–∏ –≥—Ä–∞–≤—Ü—ñ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –∑–∞–º—ñ–Ω–∏ –≥—Ä–∞–≤—Ü—ñ–≤
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–æ–Ω–µ–Ω—Ç—ñ–≤

üí° **–ü—ñ–¥–∫–∞–∑–∫–∞:** –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /link_sleeper –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é, —â–æ–± –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–π–¥–∂–µ—Å—Ç–∏.

üí¨ **–ü–∏—Ç–∞–Ω–Ω—è?** @ak_papasoft`
      
      await ctx.reply(todayMessage, { parse_mode: 'Markdown' })
    }
    
    const handleTimezone = async (ctx: any) => {
      await ctx.reply('üïê **–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É**\n\nüîÑ –§—É–Ω–∫—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\nüìç **–ü–æ—Ç–æ—á–Ω–∏–π –ø–æ—è—Å:** Europe/Kiev (UTC+2)\n\nüí¨ **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?** @ak_papasoft', { parse_mode: 'Markdown' })
    }
    
    const handleTimezoneInput = async (ctx: any) => {
      // Silent fallback for timezone input
    }
    
    const handleFeedback = async (ctx: any) => {
      await ctx.reply('üí¨ **–ó–≤\'—è–∑–æ–∫ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏**\n\nüì© –î–ª—è –≤—ñ–¥–≥—É–∫—ñ–≤, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –∞–±–æ –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –ø–∏—à—ñ—Ç—å –Ω–∞–ø—Ä—è–º—É: @ak_papasoft\n\nüîß **–©–æ –º–æ–∂–µ—Ç–µ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏:**\n‚Ä¢ –ü–æ–º–∏–ª–∫–∏ –≤ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞\n‚Ä¢ –Ü–¥–µ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏\n‚Ä¢ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π\n\n‚ö° –ú–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º –¥–æ–±–∏!', { parse_mode: 'Markdown' })
    }
    
    const handleFeedbackMessage = async (ctx: any) => {
      // Silent fallback
    }
    
    const isUserInFeedbackMode = () => false
    
    const handleLanguage = async (ctx: any) => {
      await ctx.reply('üåê **–ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É**\n\nüá∫üá¶ –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞: **–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞**\n\nüîÑ –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\nüí° **–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –º–æ–≤–∏:**\n‚Ä¢ üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\n‚Ä¢ üá∫üá∏ English\n\nüí¨ **–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?** @ak_papasoft', { parse_mode: 'Markdown' })
    }
    
    // Setup command handlers
    bot.command('start', handleStart)
    bot.command('help', handleHelp)
    bot.command('link_sleeper', handleLinkSleeper)
    bot.command('leagues', handleLeagues)
    bot.command('today', handleToday)
    bot.command('timezone', handleTimezone)
    bot.command('feedback', handleFeedback)
    bot.command('lang', handleLanguage)

    // Setup callback query handler for inline buttons
    bot.on('callback_query', handleLeagueCallback)

    // Setup text message handler
    bot.on('text', async (ctx) => {
      const userId = ctx.from?.id
      
      if (userId && isUserInFeedbackMode()) {
        await handleFeedbackMessage(ctx)
        return
      }
      
      await handleTimezoneInput(ctx)
    })

    // Handle unknown commands
    bot.on('message', async (ctx) => {
      if (ctx.message && 'text' in ctx.message && ctx.message.text.startsWith('/')) {
        await ctx.reply('‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.')
      }
    })

    // Error handling
    bot.catch(async (err, ctx) => {
      console.error('=== BOT ERROR ===', err)
      try {
        await ctx.reply('‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.')
      } catch (replyError) {
        console.error('Failed to send error message:', replyError)
      }
    })
    
    // Get request body
    const body = await request.json() as any
    console.log('=== PROCESSING UPDATE ===', JSON.stringify(body, null, 2))
    
    // Process the update
    await bot.handleUpdate(body)
    
    return NextResponse.json({ ok: true })
    
  } catch (error) {
    console.error('=== WEBHOOK ERROR ===', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}