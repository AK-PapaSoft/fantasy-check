import { t, getSupportedLanguages, isLanguageSupported } from '../../src/i18n';

describe('i18n', () => {
  describe('t function', () => {
    it('should return translation for existing key', () => {
      const result = t('greet');
      
      expect(result).toBe('–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è Sleeper NFL. –î–æ–¥–∞–π —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ–º–∞–Ω–¥–æ—é /link_sleeper <–Ω—ñ–∫–Ω–µ–π–º>.');
    });

    it('should return key if translation not found', () => {
      const result = t('non_existent_key' as any);
      
      expect(result).toBe('non_existent_key');
    });

    it('should interpolate variables', () => {
      const result = t('linked_ok', { username: 'test_user' });
      
      expect(result).toBe('–ó–≤\'—è–∑–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Sleeper: test_user');
    });

    it('should handle multiple variables', () => {
      const result = t('digest_header', { league: 'Test League', week: 10 });
      
      expect(result).toBe('üèà Sleeper | –õ—ñ–≥–∞: Test League | –¢–∏–∂–¥–µ–Ω—å 10');
    });

    it('should handle numeric variables', () => {
      const result = t('digest_score', { myScore: 98.5, oppScore: 87.2 });
      
      expect(result).toBe('–†–∞—Ö—É–Ω–æ–∫: 98.5 ‚Äì 87.2');
    });

    it('should leave unmatched placeholders as is', () => {
      const result = t('linked_ok', { wrongVar: 'test' });
      
      expect(result).toBe('–ó–≤\'—è–∑–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Sleeper: {username}');
    });

    it('should default to Ukrainian language', () => {
      const result = t('greet');
      
      expect(result).toContain('–ü—Ä–∏–≤—ñ—Ç');
    });
  });

  describe('getSupportedLanguages', () => {
    it('should return array of supported languages', () => {
      const languages = getSupportedLanguages();
      
      expect(languages).toBeInstanceOf(Array);
      expect(languages).toContain('uk');
    });
  });

  describe('isLanguageSupported', () => {
    it('should return true for supported language', () => {
      expect(isLanguageSupported('uk')).toBe(true);
    });

    it('should return false for unsupported language', () => {
      expect(isLanguageSupported('fr')).toBe(false);
      expect(isLanguageSupported('invalid')).toBe(false);
    });
  });

  describe('error handling', () => {
    it('should handle empty variables object', () => {
      const result = t('linked_ok', {});
      
      expect(result).toBe('–ó–≤\'—è–∑–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Sleeper: {username}');
    });

    it('should handle null/undefined variables', () => {
      const result = t('linked_ok', { username: null as any });
      
      expect(result).toBe('–ó–≤\'—è–∑–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Sleeper: {username}');
    });
  });

  describe('message formatting', () => {
    it('should format help message correctly', () => {
      const result = t('help');
      
      expect(result).toContain('üèà **–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:**');
      expect(result).toContain('/start');
      expect(result).toContain('/link_sleeper');
      expect(result).toContain('/leagues');
      expect(result).toContain('/today');
      expect(result).toContain('/timezone');
      expect(result).toContain('/help');
    });

    it('should format error messages', () => {
      expect(t('error_generic')).toBe('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
      expect(t('error_sleeper_api')).toBe('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—ñ –¥–æ Sleeper API. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.');
      expect(t('error_database')).toBe('–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    });

    it('should format success messages', () => {
      expect(t('no_games')).toBe('–°—å–æ–≥–æ–¥–Ω—ñ —ñ–≥–æ—Ä –Ω–µ–º–∞—î. –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!');
      expect(t('api_success')).toBe('–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    });
  });
});